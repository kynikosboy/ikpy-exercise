################
##   기본 세팅  ##
################

import matplotlib.pyplot as plt
from ikpy.chain import Chain
from ikpy.link import OriginLink, URDFLink
import numpy as np
import plot_utils 
test_link = Chain(name='test_arm', links=[
    OriginLink(),
    URDFLink(
      name="first_link",
      origin_translation=[1, 1, 0], # The translation vector. (In URDF, attribute "xyz" of the "origin" element) (해당 링크의 inlet 프레임 좌표계에 대한 outlet 프레임의 좌표값)
      origin_orientation=[0, 0, 0], # The orientation of the link. (In URDF, attribute "rpy" of the "origin" element) (해당 링크의 inlet 프레임 좌표계에 대한 outlet 프레임의 회전 정도 (radian units))
      rotation=[0, 0, 1], # The rotation axis of the link. (In URDF, attribute "xyz" of the "axis" element) (해당 링크의 말단에서 정기구학에서 사용할 회전축 설정(a,b,c)=(na,nb,nc))
    ),
    URDFLink(
      name="second_link",
      origin_translation=[1, 0, 0],
      origin_orientation=[0, 0, 0],
      rotation=[0, 0, 1],                 # (너무나 당연하지만)URDFLink를 설정할 때 사용한 행렬은 고정된 값이 아니고, 원하는 상황에 따라 조작하는 변수임.
    )
])
import matplotlib.pyplot
from mpl_toolkits.mplot3d import Axes3D
ax = matplotlib.pyplot.figure().add_subplot(111, projection='3d')  #삼차원 plot을 통해 시각화 

################
## 정기구학 연습 ##
################

test_link.plot([0,30*np.pi/180,0], ax) # 정해놓은 축과 좌표계를 바탕으로 각 조인트의 각도를 0도, 30도, 0도로 설정해본 예시

################
## 역기구학 연습 ##
################

target_vector  = [ 2, 0, 0]  # 목표로 하는 좌표값을 (1,0,0)으로 설정한 에시
target_frame = np.eye(4)
target_frame[:3, 3] = target_vector

real_frame  = test_link.forward_kinematics(test_link.inverse_kinematics(target_vector))
print("--> Computed Position Vector : %s" % real_frame[:3, 3])
print("--> Original Position Vector : %s" % target_frame[:3, 3])
test_link.plot(test_link.inverse_kinematics(target_vector), ax, target=target_vector)
matplotlib.pyplot.show()

if (round(real_frame[0, 3],2)==round(target_frame[0, 3],2)):
    if (round(real_frame[1, 3],2)==round(target_frame[1, 3],2)):
        if (round(real_frame[2, 3],2)==round(target_frame[2, 3],2)):
            print("The angles of each joints are : ", 180*(test_link.inverse_kinematics(target_vector))/np.pi)
        else: 
            print("Error: Invalid Position Vector was targeted")  
    else: 
      print("Error: Invalid Position Vector was targeted")  
else: 
  print("Error: Invalid Position Vector was targeted")  

# 해당 라이브러리를 사용하면서 발견한 문제점
# 1. 역기구학 사용시, 도달이 불가능한 점을 목표로 잡아도, 이에 대해 Error를 출력하지 않고, 나름대로, 연장선을 긋다보면 결국 그 점에 도달할 수 있는 그런 결과를 출력한다는 점.
# 2. 마찬가지로 역기구학 사용시, 수직 좌표 값을 출력할 때 90°와 같이 기재하지 않고 89.999...°과 같은 결과값을 출력하는데, 해당 라이브러리가 atan2가 아니고 atan를 사용해서 역기구학을 계산하는 것으로 보임.

# 참고 자료: https://pinkwink.kr/1159
